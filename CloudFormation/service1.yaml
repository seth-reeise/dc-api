---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Divine Canine Admin API'

Parameters:
  Env:
    Type: String
    Description: 'Environment that service runs on'
    Default: 'dev'
  
  ServiceName:
    Type: String
    Description: 'Name of service'
    Default: 'dc-admin-service'

  DockerImage:
    Type: String
    Description: 'The Docker image url'
  
  Subnet1:
    Type: String
    Description: 'Subnet for task'
  
  SecurityGroup:
    Type: String
    Description: 'Security group for task'
  
  VpcId:
    Type: String
    Description: 'Vpc id for task'
    
  ClusterArn:
    Type: String
    Description: "Arn of ECS Cluster"

Mappings:
  WorkloadEnv:
    'dev':
      Name: dev
      Cpu: 256
      Memory: 512
      DesiredCount: 1
      MinCapacity: 1
      MaxCapacity: 1
      MinimumHealthyPercent: 0
      HealthCheckGracePeriodSeconds: 0
    'production':
      Name: prod
      Cpu: 512
      Memory: 1024
      DesiredCount: 2
      MinCapacity: 1
      MaxCapacity: 2
      MinimumHealthyPercent: 100
      HealthCheckGracePeriodSeconds: 150

Resources:
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
    Policies:
      - PolicyName: environment-specific-parameters
        PolicyDocument:
          Statement:
            - Sid: LoggingAccess
              Effect: Allow
              Action:
                - cloudwatch:Describe*
                - cloudwatch:GetMetricStatistics
                - cloudwatch:ListMetrics
                - cloudwatch:PutMetricData
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogStreams
                - logs:DescribeLogGroups
              Resource: '*'
            - Sid: SsmAccess
              Effect: Allow
              Action:
                - ssm:GetParameter
                - ssm:GetParameters
                - ssm:GetParametersByPath
              Resource:
                - !Sub 'arn:aws:ssm:us-east-1:${AWS::AccountId}:parameter/dc-admin/*'
  
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole
    Policies:
      - PolicyName: ssm-params-policy
        PolicyDocument:
          Statement:
            - Sid: DbConnection
              Effect: Allow
              Action:
                - ssm:GetParameter
                - ssm:GetParameters
                - ssm:GetParametersByPath
              Resource:
                - 'arn:aws:ssm:us-east-1:${AWS::AccountId}:parameter/dc-admin/*'

  AutoscaleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: application-autoscaling.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole
      Tags:
        - Key: Name
          Value: !Sub '{ServiceName}'
        - Key: Env
          Value: !Sub ${Env}

  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      RoleARN: !GetAtt AutoscaleRole.Arn
      ResourceId: !Sub
        - 'service/${Cluster}/${Service}'
        - Cluster: arn:aws:ecs:us-east-1:348958839572:cluster/dc-prod
          Service: !GetAtt Service.Name
      ServiceNamespace: ecs
      ScalableDimension: ecs:service:DesiredCount
      MinCapacity: !FindInMap [ WorkloadEnv, !Ref Env, MinCapacity ]
      MaxCapacity: !FindInMap [ WorkloadEnv, !Ref Env, MaxCapacity ]

  ScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: 'scaling-policy'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 75.0

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: !FindInMap [ WorkloadEnv, !Ref Env, Cpu ]
      Memory: !FindInMap [ WorkloadEnv, !Ref Env, Memory ]
      NetworkMode: awsvpc
      RequiresCompatibilities: [ FARGATE ]
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Essential: True
          Image: !Ref DockerImage
          Environment:
            - Name: ENV
              Value: !FindInMap [ WorkloadEnv, !Ref Env, Name ]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: !Sub ${Env}
          PortMappings:
            - ContainerPort: 80
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}
        - Key: Env
          Value: !Sub ${Env}
          
  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - TaskDefinition
    Properties:
      Cluster: !Sub ${ClusterArn}
      LaunchType: FARGATE
      HealthCheckGracePeriodSeconds: !FindInMap [ WorkloadEnv, !Ref Env, HealthCheckGracePeriodSeconds ]
      DeploymentConfiguration:
        MinimumHealthyPercent: !FindInMap [ WorkloadEnv, !Ref Env, MinimumHealthyPercent ]
      DesiredCount: !FindInMap [ WorkloadEnv, !Ref Env, DesiredCount ]
      TaskDefinition: !Ref TaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Sub ${SecurityGroup}
          Subnets:
            - !Sub ${Subnet1}
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 1